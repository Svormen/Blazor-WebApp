@page "/game"

<h1>Game</h1>
<hr>

<ul class="app-description">
    <h3>Game Description</h3>
    <li>Fill the grid with numbers from 1 to 9. Each row and column must sum to the number in the blue cell.</li>
    <li>Click on a number to select it, then click on a cell to place the number.</li>
    <li>Click on the "Check" button to see if your solution is correct.</li>
    <li>Click on the "Hint" button to see the correct solution.</li>
    <li>Click on the "New Game" button to generate a new grid.</li>
    <li>Click on the "Reset" button to clear the grid.</li>
</ul>

<div class="app-container">
    <div class="game-container">
        <table>
            <tr>
                <td class="gray-background"></td>
                <td class="blue-background">@colSums[0]</td>
                <td class="blue-background">@colSums[1]</td>
                <td class="blue-background">@colSums[2]</td>
            </tr>
            <tr>
                <td class="blue-background">@rowSums[0]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[0] != 0 ? "correct" : "") @(hintIndexes.Contains(0) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(0)">@gameBoard[0]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[1] != 0 ? "correct" : "") @(hintIndexes.Contains(1) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(1)">@gameBoard[1]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[2] != 0 ? "correct" : "") @(hintIndexes.Contains(2) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(2)">@gameBoard[2]</td>
            </tr>
            <tr>
                <td class="blue-background">@rowSums[1]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[3] != 0 ? "correct" : "") @(hintIndexes.Contains(3) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(3)">@gameBoard[3]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[4] != 0 ? "correct" : "") @(hintIndexes.Contains(4) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(4)">@gameBoard[4]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[5] != 0 ? "correct" : "") @(hintIndexes.Contains(5) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(5)">@gameBoard[5]</td>
            </tr>
            <tr>
                <td class="blue-background">@rowSums[2]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[6] != 0 ? "correct" : "") @(hintIndexes.Contains(6) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(6)">@gameBoard[6]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[7] != 0 ? "correct" : "") @(hintIndexes.Contains(7) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(7)">@gameBoard[7]</td>
                <td class="playable-cell @(isCorrect == true && gameBoard[8] != 0 ? "correct" : "") @(hintIndexes.Contains(8) ? "hintActivated" : "")"
                    @onclick="() => PlaceNumber(8)">@gameBoard[8]</td>
            </tr>
        </table>
    </div>

    <div class="buttons-number">
        <button class="buttonNumber @(selectedNumber == 1 ? "selected" : "")"
            @onclick="() => SelectNumber(1)">1</button>
        <button class="buttonNumber @(selectedNumber == 2 ? "selected" : "")"
            @onclick="() => SelectNumber(2)">2</button>
        <button class="buttonNumber @(selectedNumber == 3 ? "selected" : "")"
            @onclick="() => SelectNumber(3)">3</button>
        <button class="buttonNumber @(selectedNumber == 4 ? "selected" : "")"
            @onclick="() => SelectNumber(4)">4</button>
        <button class="buttonNumber @(selectedNumber == 5 ? "selected" : "")"
            @onclick="() => SelectNumber(5)">5</button>
        <button class="buttonNumber @(selectedNumber == 6 ? "selected" : "")"
            @onclick="() => SelectNumber(6)">6</button>
        <button class="buttonNumber @(selectedNumber == 7 ? "selected" : "")"
            @onclick="() => SelectNumber(7)">7</button>
        <button class="buttonNumber @(selectedNumber == 8 ? "selected" : "")"
            @onclick="() => SelectNumber(8)">8</button>
        <button class="buttonNumber @(selectedNumber == 9 ? "selected" : "")"
            @onclick="() => SelectNumber(9)">9</button>
    </div>

    <div class="buttons">
        <button class="button" @onclick="Hint">Hint</button>
        <button class="button" @onclick="Check">Check</button>
        <button class="button" @onclick="GenerateDigits">New Game</button>
        <button class="button" @onclick="ResetGrid">Reset</button>
    </div>
</div>

<hr>
<p><br><u>TESTING OUTPUTS</u><br></p>
<p>Generated numbers: @string.Join(", ", digits)</p>
<p>Sum of rows: @string.Join(", ", rowSums)</p>
<p>Sum of columns: @string.Join(", ", colSums)</p>
<p>Selected number: @selectedNumber</p>
<p>Game grid: @rowCheck | @colCheck</p>
<p>Solution: @string.Join(", ", gameBoard)</p>
<p>Correct solution: @isCorrect</p>
<p>Hint number: @hintCount </p>
<p>Hint indexes: @string.Join(", ", hintIndexes)</p>

@code {
    private int[] digits = new int[9];
    public int[] rowSums = new int[3];
    public int[] colSums = new int[3];
    private int? selectedNumber = null;
    private int rowCheck = 0;
    private int colCheck = 0;
    private int[] gameBoard = new int[9];
    private bool isCorrect = false;
    private int hintCount = 1;
    private List<int> hintIndexes = new List<int>();

    private void GenerateDigits()
    {
        hintIndexes.Clear();
        hintCount = 1;
        isCorrect = false;

        List<int> numbers = Enumerable.Range(1, 9).OrderBy(x => new Random().Next()).ToList();
        for (int i = 0; i < 9; i++)
        {
            digits[i] = numbers[i];
        }

        for (int i = 0; i < 3; i++)
        {
            rowSums[i] = digits[i * 3] + digits[i * 3 + 1] + digits[i * 3 + 2];
            colSums[i] = digits[i] + digits[i + 3] + digits[i + 6];
        }

        gameBoard = new int[9];
        StateHasChanged();
    }

    private void SelectNumber(int number)
    {
        selectedNumber = number;
        StateHasChanged();
    }

    private void PlaceNumber(int index)
    {
        rowCheck = index / 3;
        colCheck = index % 3;
        if (selectedNumber.HasValue)
        {
            gameBoard[index] = selectedNumber.Value;
            selectedNumber = null;
        }
        else
        {
            gameBoard[index] = 0;
            if (hintIndexes.Contains(index))
            {
                hintIndexes.Remove(index);
            }
        }
        StateHasChanged();
    }

    // Function for resetting the game grid
    private void ResetGrid()
    {
        hintIndexes.Clear();
        hintCount = 1;
        isCorrect = false;

        gameBoard = new int[9];
        selectedNumber = null;
        StateHasChanged();
    }

    // Function for checking the correctness of the game board
    private void Check()
    {
        for (int i = 0; i < 3; i++)
        {
            if (rowSums[i] != gameBoard[i * 3] + gameBoard[i * 3 + 1] + gameBoard[i * 3 + 2])
            {
                isCorrect = false;
                break;
            }
            if (colSums[i] != gameBoard[i] + gameBoard[i + 3] + gameBoard[i + 6])
            {
                isCorrect = false;
                break;
            }
            isCorrect = true;
        }
        StateHasChanged();
    }

    // Function for hinting the correct solution
    private void Hint()
    {
        if (digits.All(x => x == 0))
        {
            return;
        }
        if (hintCount > 9)
        {
            return;
        }

        int wantedIndex = Array.IndexOf(digits, hintCount);
        gameBoard[wantedIndex] = hintCount;
        hintCount++;
        hintIndexes.Add(wantedIndex);
        StateHasChanged();
    }
}