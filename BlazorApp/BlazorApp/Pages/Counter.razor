@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json.Linq
@page "/counter"
@inject IJSRuntime JS

<PageTitle>Countdown to 2026</PageTitle>

<h1>Random Apps</h1>
<hr>

<div class="countdown-container">
    <p class="countdown-text"><h3>🚀 2026 Countdown 🚀</h3><hr>@countDown</p>
</div>

<div class="countdown-container">
    <p class="weather-text">
        <h3>🌦️ Weather Information 🌦️</h3>
        <hr>
        <p>Location: @location</p>
        <pre>@weatherInformation</pre>
    </p>
</div>


@code {
    private DateTime targetDate = new DateTime(2026, 1, 1, 0, 0, 0);
    private string countDown = string.Empty;
    private System.Timers.Timer? timer;

    // Weather information
    private string apiKey = "MZQND65XWUU2RJK74PENNLGQU";
    private string location = "Brno, 64, CZ";
    private string weatherInformation = "Loading weather information ...";

    protected override async Task OnInitializedAsync()
    {
        UpdateCountdown();
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) => {
            UpdateCountdown();
            InvokeAsync(StateHasChanged);
        };
        timer.Start();

        await GetWeatherData();
    }

    private void UpdateCountdown()
    {
        TimeSpan t = targetDate - DateTime.Now;
        countDown = $"{t.Days} Days : {t.Hours} Hours : {t.Minutes} Minutes : {t.Seconds} Seconds";
    }

    private async Task GetWeatherData()
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                string url = $"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}?key={apiKey}";
                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();

                JObject json = JObject.Parse(responseBody);

                var day = json["days"]?[0];
                if (day != null)
                {
                    double WeatherTemperatureF = (double?)day["temp"] ?? 0;
                    double WeatherTemperature = (WeatherTemperatureF - 32) * 5 / 9;
                    double WeatherTemperatureMaxF = (double?)day["tempmax"] ?? 0;
                    double WeatherTemperatureMinF = (double?)day["tempmin"] ?? 0;
                    double WeatherTemperatureMax = (WeatherTemperatureMaxF - 32) * 5 / 9;
                    double WeatherTemperatureMin = (WeatherTemperatureMinF - 32) * 5 / 9;
                    double WeatherWindSpeed = (double?)day["windspeed"] ?? 0;
                    double WeatherPressure = (double?)day["pressure"] ?? 0;
                    double WeatherCloudCover = (double?)day["cloudcover"] ?? 0;
                    double WeatherVisibility = (double?)day["visibility"] ?? 0;

                    weatherInformation = $"Temperature: {(int)WeatherTemperature}°C\n" +
                                    $"Max temperature: {(int)WeatherTemperatureMax}°C\n" +
                                    $"Min temperature: {(int)WeatherTemperatureMin}°C\n" +
                                    $"Wind speed: {WeatherWindSpeed} km/h\n" +
                                    $"Pressure: {(int)WeatherPressure} hPa\n" +
                                    $"Cloudcover: {(int)WeatherCloudCover}%\n" +
                                    $"Visibility: {WeatherVisibility} km";

                }
                else
                {
                    weatherInformation = "Problem with weather data";
                }
            }
            catch (HttpRequestException e)
            {
                weatherInformation = $"Problem with weather data: {e.Message}";
            }

            // UI update
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
