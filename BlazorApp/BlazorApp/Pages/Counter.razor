@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json.Linq
@page "/counter"
@inject IJSRuntime JS

<PageTitle>Countdown to 2026</PageTitle>

<h1>Random Apps</h1>
<hr>

<div class="countdown-container">
    <p class="countdown-text">
    <h3>🚀 2026 Countdown 🚀</h3>
    <hr>
    @countDown
    </p>
</div>

<div class="countdown-container">
    <div class="weather-text">
        <h3>Weather App</h3>
        <hr>

        @if (WeatherTemperature == -100 || WeatherTemperatureMax == -100 ||
                WeatherTemperatureMin == -100 || WeatherPressure == -100 ||
                WeatherCloudCover == -100 || WeatherVisibility == -100 ||
                WeatherWindSpeed == -100)
        {
            <p>Loading...</p>
        }
        else
        {
            <p><strong><span class="location">Brno</span></strong></p>

            @if (!string.IsNullOrEmpty(WeatherIcon))
            {
                <img src="https://raw.githubusercontent.com/visualcrossing/WeatherIcons/main/SVG/1st%20Set%20-%20Color/@(WeatherIcon).svg"
                    alt="@WeatherIcon" width="100">
            }

            <p><span class="temp">@WeatherTemperature °</span></p>
            <div class="weather-details">
                <p class="cloud"><strong>Clouds:</strong> <span>@WeatherCloudCover %</span></p>

                <div class="temp-row">
                    <p><strong>Max:</strong> <span class="max-temp">@WeatherTemperatureMax °</span></p>
                    <p><strong>Min:</strong> <span class="min-temp">@WeatherTemperatureMin °</span></p>
                </div>
            </div>

            <div class="weather-bottom">
                <p class="wind-container"><strong>Wind</strong><br><span class="wind">@WeatherWindSpeed<br></span>km/h</p>
                <p class="pressure-container"><strong>Pressure</strong><br><span
                        class="pressure">@WeatherPressure<br></span>hPa</p>
                <p class="visibility-container"><strong>Visibility</strong><br><span
                        class="visibility">@WeatherVisibility<br></span>km</p>
            </div>
        }
    </div>
</div>

@code {
    private DateTime targetDate = new DateTime(2026, 1, 1, 0, 0, 0);
    private string countDown = string.Empty;
    private System.Timers.Timer? timer;

    private string apiKey = "MZQND65XWUU2RJK74PENNLGQU";
    private string location = "Brno, 64, CZ";

    private int WeatherTemperature = -100,
    WeatherTemperatureMax = -100,
    WeatherTemperatureMin = -100,
    WeatherPressure = -100,
    WeatherCloudCover = -100;
    private double WeatherWindSpeed = -100,
    WeatherVisibility = -100;
    private string WeatherIcon = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        UpdateCountdown();
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) =>
        {
            UpdateCountdown();
            InvokeAsync(StateHasChanged);
        };
        timer.Start();

        await GetWeatherData();
    }

    private void UpdateCountdown()
    {
        TimeSpan t = targetDate - DateTime.Now;
        countDown = $"{t.Days} Days : {t.Hours} Hours : {t.Minutes} Minutes : {t.Seconds} Seconds";
    }

    private async Task GetWeatherData()
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                string url =
                $"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}?key={apiKey}";
                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();

                JObject json = JObject.Parse(responseBody);
                var day = json["days"]?[0];

                if (day != null)
                {
                    double WeatherTemperatureF = (double?)day["temp"] ?? -100;
                    double WeatherTemperatureMaxF = (double?)day["tempmax"] ?? -100;
                    double WeatherTemperatureMinF = (double?)day["tempmin"] ?? -100;

                    WeatherTemperature = (int)((WeatherTemperatureF - 32) * 5 / 9);
                    WeatherTemperatureMax = (int)((WeatherTemperatureMaxF - 32) * 5 / 9);
                    WeatherTemperatureMin = (int)((WeatherTemperatureMinF - 32) * 5 / 9);
                    WeatherWindSpeed = (double?)day["windspeed"] ?? -100;
                    WeatherPressure = (int)((double?)day["pressure"] ?? -100);
                    WeatherCloudCover = (int)((double?)day["cloudcover"] ?? -100);
                    WeatherVisibility = (double?)day["visibility"] ?? -100;

                    WeatherIcon = (string?)day["icon"] ?? string.Empty;
                }
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine($"\nException Caught, {e.Message} ");
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
