@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json.Linq
@page "/counter"
@inject IJSRuntime JS

<PageTitle>Countdown to 2026</PageTitle>

<h1>🚀 2026 Countdown 🚀</h1>
<hr>
<div class="countdown-container">
    <p class="countdown-text">@countDown</p>
</div>

@code {
    private DateTime targetDate = new DateTime(2026, 1, 1, 0, 0, 0);
    private string countDown = string.Empty;
    private System.Timers.Timer? timer;

    // wetaher information
    public string apiKey = "MZQND65XWUU2RJK74PENNLGQU";
    public string location = "Bratislava";

    protected override void OnInitialized()
    {
        UpdateCountdown();
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) => {
            UpdateCountdown();
            InvokeAsync(StateHasChanged);
        };
        timer.Start();
    }

    private void UpdateCountdown()
    {
        TimeSpan t = targetDate - DateTime.Now;
        countDown = $"{t.Days} Days : {t.Hours} Hours : {t.Minutes} Minutes : {t.Seconds} Seconds";
    }

    // Functions for weather information
    async void GetWeatherData()
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                string url = $"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}?key={apiKey}";
                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();

                // write all data
                Console.WriteLine(responseBody);

                // Parsing JSON response
                JObject json = JObject.Parse(responseBody);

                // Getting weather data
                var day = json["days"]?[0];
                if (day != null)
                {
                    double WeatherTemperatureF = (double?)day["temp"] ?? 0;
                    double WeatherTemperature = (WeatherTemperatureF - 32) * 5 / 9;
                    double WeatherTemperatureMaxF = (double?)day["tempmax"] ?? 0;
                    double WeatherTemperatureMinF = (double?)day["tempmin"] ?? 0;
                    double WeatherTemperatureMax = (WeatherTemperatureMaxF - 32) * 5 / 9;
                    double WeatherTemperatureMin = (WeatherTemperatureMinF - 32) * 5 / 9;
                    double WeatherWindSpeed = (double?)day["windspeed"] ?? 0;
                    double WeatherPressure = (double?)day["pressure"] ?? 0;
                    double WeatherCloudCover = (double?)day["cloudcover"] ?? 0;
                    double WeatherVisibility = (double?)day["visibility"] ?? 0;
                }

                //Console.WriteLine("Temp: " + (int)WeatherTemperature + " WindSpeed: " + WeatherWindSpeed + " Pressure:" + (int)WeatherPressure + " CloudCover:" + (int)WeatherCloudCover + " Visibility:" + WeatherVisibility + "\n");
                /*Temperature.text = ((int)WeatherTemperature).ToString();
                TemperatureMax.text = ((int)WeatherTemperatureMax).ToString();
                TemperatureMin.text = ((int)WeatherTemperatureMin).ToString();
                WindSpeed.text = ((int)WeatherWindSpeed).ToString();
                Pressure.text = ((int)WeatherPressure).ToString();
                CloudCover.text = ((int)WeatherCloudCover).ToString();
                Visibility.text = WeatherVisibility.ToString();*/
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine($"Error: {e.Message}");
            }
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
